
如何将如下的JSON正确解析成 Object
{
  "userId": 111323290434354540545
}

答:

var jsonRes = '{"userId":111323290434354540545}';
 
try {
    var obj = JSON.parse(jsonRes);
    console.log(obj);
} catch (e) {
    console.error("解析JSON时发生错误:", e);
}
注：

早期纯原生javascript时，简单轻量的项目会使用eval,大一点的项目则需引入专门处理json的插件，
目前浏览器已几乎都支持，也几乎是基于vue，此方法已弃用。

-----------------------------------------------------------------

前端需要稳定每隔1s向服务端请求API, 请问如何实现？

答:
let timer = null;
onMounted(() => {
    // 当组件挂载后开始定时器
    timer = setInterval(() => {
        // 请求api
        }, 1000)
});
 
onUnmounted(() => {
    // 当组件卸载前清除定时器
    timer&&clearInterval(timer)
});

注：
使用时候请注意是否有clearInterval
另使用setInterval,或者setTimeout都可能存在阻塞情况(具体常见如页面带有长列表，或者带复杂编辑功能或数据较多的可编辑table(使用element/antdv都会))
题外：实际应用时，可能有时候此需求会使用websocket实现（看实际情况）
-------------------------------------------------------------------
什么情况下，你会为你的项目引入状态管理库，比如Redux, Pinia, 可以简述一下起到了什么作用么？
答:
状态管理库可以允许跨组件或跨页面共享状态，所以常用情景
1、多组件共享状态，（如登录状态等）
2、组件直接需要相互通信（常见监听变更做某些处理，当然也可以用bus）
3、状态需要统一管理和追踪
   如果我们在每个组件中分别管理状态，会造成代码冗余和维护困难
4、需要进行异步操作和数据请求
（如多个不同组件一定时间内调用同一接口，但是他们的结果又可复用，通常用状态管理来记住请求状态）
常见项目中的字典或来源的翻译

--------------------------------------------------------------------
为什么ESM与CJS不能兼容？

ESM 和 CJS 是两套不同的设计。表面上，ESM 使用起来虽然有点接近 CJS，但是实现差异巨大。
1.不同的加载逻辑
 a: CJS 的 require() 是同步的，实际执行的时候会从磁盘或者网络中读取文件，然后立即返回执行结果。被读取的模块有自己的执行逻辑，执行完成后通过 module.exports 返回结果。
 b: ESM 标准的模块加载器则完全不同，它读取到脚本后不会直接执行，而是会先进入编译阶段进行模块解析，
    检查模块上调用了import和export的地方，并把依赖一个个异步、并行地下载下来。
    在此阶段 ESM 加载器不会执行任何依赖模块代码，只会进行语法检错、确定模块的依赖关系、确定模块输入和输出的变量。
    最后 ESM 会进入执行阶段，按顺序执行各模块脚本
    
2.ESM 的模块加载是基于 Top-level await 设计的，
    即 ES 模块中，无须在async函数内部就能直接使用await
    在 CSJ 模块中是没有这种能力的（即使使用了动态的import接口），这也是为何require无法加载 ESM 的原因之一
    试想一下，一个 CJS 模块里的require加载器同步地加载了一个 ES 模块，该 ES 模块里异步地import了一个 CJS 模块，
    该 CJS 模块里又同步地去加载一个 ES 模块…… 这种复杂的嵌套逻辑处理起来会变得十分棘手。
3.ESM默认使用严格模式，ES模块中this不在指向全局对象，且变量声明前无法使用
4.ESM 缺乏 __filename 和 __dirname
 可以在 CJS 模块里直接用__filename 和 __dirname
 ESM 的标准中不包含这方面的实现，即无法在 Node 的 ESM 里使用__filename和__dirname
